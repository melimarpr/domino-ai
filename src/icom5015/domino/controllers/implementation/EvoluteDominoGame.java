package icom5015.domino.controllers.implementation;

import com.sun.deploy.util.StringUtils;
import icom5015.domino.controllers.DominoGame;
import icom5015.domino.models.Player;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * Created by root on 5/1/14.
 *
 1. 45.0 1.2836022375495837,2.8537857927115584,8.51168713564064,4.3202510645277545,5.585125202645818,0.603549145451765
 2. 65.0 5.8592800547607045,3.2785503145962593,2.163006050216251,8.64943754681923,9.738439852279445,2.292954302716528
 3. 65.0 1.997464922943143,6.335622172249318,7.935902727559916,8.077740493998823,3.6891620061449606,2.546376304018938
 4. 55.00000000000001 3.3042331022478844,8.261263044638122,0.817858344255894,5.278576384594292,6.92581590839379,7.581521466239992
 5. 60.0 6.0003793711414035,2.3672334724811703,8.477034352107404,0.5256682213144193,8.681502739401754,1.8227039737264006
 6. 55.00000000000001 9.608137325176939,2.3967247376348464,2.6568907604054015,5.627963205650771,8.258120609340786,9.337645924581283
 7. 60.0 5.175037028606173,5.648057471428819,0.8641566008427837,6.194859063187417,4.423883715268422,2.606788824013476
 8. 55.00000000000001 1.3034896289402986,6.515374095873852,0.6447132486183993,9.392518685112304,6.586342643915629,8.28070885980614
 9. 55.00000000000001 0.2705829103536217,9.042368328871923,7.855075204494158,5.445838640567446,7.800185182041197,1.1996677482718854
 10. 50.0 7.193649248922687,1.355216670337328,1.7707523527094626,3.692143113754005,5.509935224569585,4.062651484402583
 11. 55.00000000000001 8.733198150537536,1.060215561568627,4.901888247184884,7.228459652621423,3.787426161124714,2.8769183014694946
 12. 50.0 6.2246188733657295,7.902900573515356,0.6605476172176339,9.167100110240403,5.406800370887959,2.856723259367624
 13. 35.0 7.760074848079364,5.923984718573036,4.930889939454549,3.7694320697317476,6.239065578040885,6.8064752447736065
 14. 40.0 7.509076129134095,2.0864219716663124,9.59301614948939,4.605416501481198,7.826362561268343,0.8342437920628243
 15. 60.0 9.676473508998415,4.449630956620847,7.128143041635479,2.054855255416941,3.9667695674404757,7.691140570027172
 16. 55.00000000000001 3.473766712778147,2.1364797000033873,0.03724027521280315,0.718629627486892,1.4470687961333661,5.935199801207245
 17. 50.0 9.66829905090721,8.720358117594731,7.045605503540991,2.998655657506506,7.509337530782969,6.303665555838743
 18. 60.0 3.0264799415147414,9.246195487195706,5.813511778310287,2.975195827621185,1.8717409705790888,7.34656661827776
 19. 55.00000000000001 3.2542383376860986,4.471031392997147,7.220475920297783,2.547448080095699,2.9976147150368835,1.2784055772473635
 20. 55.00000000000001 5.324250691145486,6.244492755403137,7.122866318056518,1.3003899722158074,0.6802671472329047,4.735082125222712
 21. 55.00000000000001 2.647504979190689,3.112853480801918,8.870757572030266,9.068832880418253,7.469823582685371,4.441693507493039
 22. 75.0 5.047870075331547,1.2987057267231517,8.236080462568253,8.928114594828912,8.382832320687903,0.7351352596204275
 */
public class EvoluteDominoGame {
    String actualGen;

    public void start() {
        List<Double> runs = new ArrayList<Double>();
        List<String> runsGen = new ArrayList<String>();
        Double p;
        int c = 0;
        while (true) {
            p = Evolute();
            runs.add(p);
            runsGen.add(actualGen);
            System.out.println("Run: " + ++c);
            if (p > 70.0) {
                break;
            }
        }

        c = 0;

        for (int i = 0; i < runs.size(); i++) {
            System.out.println(++c + ". " + runs.get(i) + " " + runsGen.get(i));
        }

    }

    private double Evolute() {
        int games = 20;
        int won = 0;

        genRandom();

        for (int i = 0; i < games; i++) {
            DominoGame dominoGame = new AutomationDominoGame();
            dominoGame.run();
            System.out.println("Winner " + Player.toStringPlayer(dominoGame.winner()) + " with score: " + dominoGame.score());

            if (dominoGame.winner() == 0 || dominoGame.winner() == 2) {
                won++;
            }
        }

        double percent = ((double)won / (double)games) * 100.0;
        System.out.println("\n\n Games Won: " + won + "/" + games + " Percent: " + percent + "%");

        return percent;
    }

    private void genRandom() {
        Random rnd = new Random();

        try {
            List<String> coefficients = new ArrayList<String>();
            PrintWriter writer = new PrintWriter("actualc.txt", "UTF-8");

            for (int i = 0; i < 6; i++) {
                coefficients.add(i, String.valueOf(rnd.nextDouble() * 10.0));
            }

            actualGen = StringUtils.join(coefficients, ",");
            writer.println(actualGen);
            writer.close();
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    //3.0953285914037942,4.879842889240107,1.5007620482323303,5.078060055462109,4.0588295794984255,7.580321427184441 35%
    //2.765184782081308,7.600013530020544,4.207536839134778,8.018708891868851,5.1302614547078065,1.004633636891178 35%
    //8.40216897062409,8.931251143286179,8.970808296033956,2.906326141211455,0.0676073746418393,4.669709640780525 30%
    //6.022264712014012,6.465003758271529,9.954783648751674,6.724694502545433,0.04602840348436721,7.358316077195215 25%
    //3.2033815440724753,0.27174098412229397,9.364096151104262,0.46938034782391225,8.866276284577202,9.99367617040048 25%
    //3.019526767712697,6.4384923561993945,4.351681113629834,9.317924114547019,5.368324738861724,3.8090982341738213 100%

}
